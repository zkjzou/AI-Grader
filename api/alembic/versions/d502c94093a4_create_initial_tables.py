"""create initial tables

Revision ID: d502c94093a4
Revises: 
Create Date: 2025-09-27 22:42:49.791575

"""
from typing import Sequence, Union

from alembic import op
import sqlalchemy as sa


# revision identifiers, used by Alembic.
revision: str = 'd502c94093a4'
down_revision: Union[str, Sequence[str], None] = None
branch_labels: Union[str, Sequence[str], None] = None
depends_on: Union[str, Sequence[str], None] = None


def upgrade() -> None:
    """Upgrade schema."""
    # ### commands auto generated by Alembic - please adjust! ###
    op.create_table('course',
    sa.Column('id', sa.Uuid(), nullable=False),
    sa.Column('name', sqlmodel.sql.sqltypes.AutoString(), nullable=False),
    sa.Column('code', sqlmodel.sql.sqltypes.AutoString(), nullable=False),
    sa.Column('description', sqlmodel.sql.sqltypes.AutoString(), nullable=True),
    sa.Column('created_at', sa.DateTime(), nullable=False),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_table('assignment',
    sa.Column('id', sa.Uuid(), nullable=False),
    sa.Column('course_id', sa.Uuid(), nullable=False),
    sa.Column('title', sqlmodel.sql.sqltypes.AutoString(), nullable=False),
    sa.Column('description', sqlmodel.sql.sqltypes.AutoString(), nullable=True),
    sa.Column('rubric_url', sqlmodel.sql.sqltypes.AutoString(), nullable=True),
    sa.Column('solution_key_url', sqlmodel.sql.sqltypes.AutoString(), nullable=True),
    sa.Column('created_at', sa.DateTime(), nullable=False),
    sa.ForeignKeyConstraint(['course_id'], ['course.id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_table('assignmentproblem',
    sa.Column('id', sa.Uuid(), nullable=False),
    sa.Column('assignment_id', sa.Uuid(), nullable=False),
    sa.Column('problem_number', sa.Integer(), nullable=False),
    sa.Column('problem_text', sqlmodel.sql.sqltypes.AutoString(), nullable=False),
    sa.Column('max_score', sa.Numeric(), nullable=False),
    sa.ForeignKeyConstraint(['assignment_id'], ['assignment.id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_table('rubric',
    sa.Column('id', sa.Uuid(), nullable=False),
    sa.Column('assignment_id', sa.Uuid(), nullable=False),
    sa.Column('created_at', sa.DateTime(), nullable=False),
    sa.ForeignKeyConstraint(['assignment_id'], ['assignment.id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_table('submission',
    sa.Column('id', sa.Uuid(), nullable=False),
    sa.Column('assignment_id', sa.Uuid(), nullable=False),
    sa.Column('submission_url', sqlmodel.sql.sqltypes.AutoString(), nullable=False),
    sa.Column('graded_at', sa.DateTime(), nullable=True),
    sa.Column('total_score', sa.Numeric(), nullable=True),
    sa.Column('created_at', sa.DateTime(), nullable=False),
    sa.ForeignKeyConstraint(['assignment_id'], ['assignment.id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_table('rubriccriteria',
    sa.Column('id', sa.Uuid(), nullable=False),
    sa.Column('rubric_id', sa.Uuid(), nullable=False),
    sa.Column('name', sqlmodel.sql.sqltypes.AutoString(), nullable=False),
    sa.Column('description', sqlmodel.sql.sqltypes.AutoString(), nullable=True),
    sa.Column('max_score', sa.Numeric(), nullable=False),
    sa.Column('order_index', sa.Integer(), nullable=False),
    sa.ForeignKeyConstraint(['rubric_id'], ['rubric.id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_table('studentproblemmatch',
    sa.Column('id', sa.Uuid(), nullable=False),
    sa.Column('submission_id', sa.Uuid(), nullable=False),
    sa.Column('problem_id', sa.Uuid(), nullable=False),
    sa.Column('matched_text', sqlmodel.sql.sqltypes.AutoString(), nullable=False),
    sa.Column('confidence', sa.Numeric(), nullable=False),
    sa.ForeignKeyConstraint(['problem_id'], ['assignmentproblem.id'], ),
    sa.ForeignKeyConstraint(['submission_id'], ['submission.id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_table('rubriclevel',
    sa.Column('id', sa.Uuid(), nullable=False),
    sa.Column('criterion_id', sa.Uuid(), nullable=False),
    sa.Column('label', sqlmodel.sql.sqltypes.AutoString(), nullable=False),
    sa.Column('score', sa.Numeric(), nullable=False),
    sa.Column('description', sqlmodel.sql.sqltypes.AutoString(), nullable=True),
    sa.ForeignKeyConstraint(['criterion_id'], ['rubriccriteria.id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_table('submissionscore',
    sa.Column('id', sa.Uuid(), nullable=False),
    sa.Column('submission_id', sa.Uuid(), nullable=False),
    sa.Column('criterion_id', sa.Uuid(), nullable=False),
    sa.Column('score', sa.Numeric(), nullable=False),
    sa.Column('reasoning', sqlmodel.sql.sqltypes.AutoString(), nullable=True),
    sa.Column('human_override', sa.Boolean(), nullable=False),
    sa.ForeignKeyConstraint(['criterion_id'], ['rubriccriteria.id'], ),
    sa.ForeignKeyConstraint(['submission_id'], ['submission.id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    # ### end Alembic commands ###


def downgrade() -> None:
    """Downgrade schema."""
    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_table('submissionscore')
    op.drop_table('rubriclevel')
    op.drop_table('studentproblemmatch')
    op.drop_table('rubriccriteria')
    op.drop_table('submission')
    op.drop_table('rubric')
    op.drop_table('assignmentproblem')
    op.drop_table('assignment')
    op.drop_table('course')
    # ### end Alembic commands ###
